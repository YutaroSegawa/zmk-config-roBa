#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/pointing.h>

#define MOUSE 4
#define SCROLL 5
#define NUM 6

&mt {
    flavor = "balanced";
    quick-tap-ms = <0>;
};

/ {
    combos {
        compatible = "zmk,combos";

        tab {
            bindings = <&kp TAB>;
            key-positions = <11 12>;
        };

        shift_tab {
            bindings = <&kp LS(TAB)>;
            key-positions = <12 13>;
        };

        muhennkann {
            bindings = <&to_layer_0 INT_MUHENKAN>;
            key-positions = <11 10>;
        };

        double_quotation {
            bindings = <&kp DOUBLE_QUOTES>;
            key-positions = <20 21>;
        };

        eq {
            bindings = <&kp EQUAL>;
            key-positions = <24 25>;
        };
    };

    macros {
        to_layer_0: to_layer_0 {
            compatible = "zmk,behavior-macro-one-param";
            #binding-cells = <1>;
            bindings = <&to 0 &macro_param_1to1 &kp MACRO_PLACEHOLDER>;
            label = "TO_LAYER_0";
        };
    };

    behaviors {
        lt_to_layer_0: lt_to_layer_0 {
            compatible = "zmk,behavior-hold-tap";
            label = "LAYER_TAP_TO_0";
            bindings = <&mo>, <&to_layer_0>;

            #binding-cells = <2>;
            tapping-term-ms = <200>;
        };
    };

    keymap {
        compatible = "zmk,keymap";

        default_layer {
            bindings = <
&kp Q           &kp W     &kp E         &kp R      &kp T                                            &kp Y        &kp U  &kp I      &kp O    &lt 5 P
&kp A           &kp S     &kp D         &kp F      &kp G        &kp LS(LC(S))      &kp LA(LEFT)     &kp H        &kp J  &kp K      &kp L    &kp SEMICOLON
&kp Z           &kp X     &kp C         &kp V      &kp B        &kp LC(LS(H))      &kp LA(RIGHT)    &kp N        &kp M  &kp COMMA  &kp DOT  &kp SLASH
&kp LEFT_SHIFT  &kp LALT  &kp LEFT_WIN  &lt 6 TAB  &lt 2 SPACE  &kp LCTRL          &lt 1 BACKSPACE  &lt 2 ENTER                             &lt 4 GRAVE
            >;

            sensor-bindings = <&inc_dec_kp PG_UP PAGE_DOWN>;
        };

        FUNCTION {
            bindings = <
&kp F1      &kp F2  &kp F3  &kp F4  &kp F5                       &kp F6    &kp F7         &kp F8    &kp F9          &kp F10
&kp ESCAPE  &trans  &trans  &trans  &trans  &trans      &kp DEL  &kp HOME  &kp PAGE_UP    &trans    &kp UP_ARROW    &kp RIGHT_ARROW
&trans      &trans  &trans  &trans  &trans  &trans      &kp INS  &kp END   &kp PAGE_DOWN  &kp LEFT  &kp DOWN_ARROW  &kp F11
&trans      &trans  &trans  &trans  &trans  &trans      &trans   &trans                                             &kp F12
            >;
        };

        NUM {
            bindings = <
&kp NUMBER_1  &kp NUMBER_2  &kp NUMBER_3  &kp NUMBER_4  &kp N5                                        &kp NUMBER_6   &kp N7     &kp N8         &kp N9            &kp N0
&kp ESCAPE    &bt BT_SEL 0  &bt BT_SEL 1  &bt BT_SEL 2  &bt BT_SEL 3  &bt BT_CLR          &kp DELETE  &kp MINUS      &kp EQUAL  &kp BACKSLASH  &kp LEFT_BRACKET  &kp RIGHT_BRACKET
&trans        &trans        &trans        &trans        &trans        &bt BT_CLR_ALL      &kp INS     &kp SEMICOLON  &kp SQT    &kp COMMA      &kp PERIOD        &kp SLASH
&trans        &trans        &trans        &trans        &trans        &trans              &trans      &trans                                                     &kp PIPE
            >;
        };

        ARROW {
            bindings = <
&kp ESCAPE      &kp LC(LS(TAB))         &kp UP_ARROW    &kp LC(TAB)              &trans                       &trans  &trans  &trans  &trans  &trans
&kp HOME        &kp LEFT_ARROW          &kp DOWN_ARROW  &kp RIGHT_ARROW          &kp END  &trans      &trans  &trans  &trans  &trans  &trans  &trans
&kp LEFT_SHIFT  &kp LG(LS(LEFT_ARROW))  &trans          &kp LG(LS(RIGHT_ARROW))  &trans   &trans      &trans  &trans  &trans  &trans  &trans  &trans
&trans          &trans                  &trans          &trans                   &trans   &trans      &trans  &trans                          &trans
            >;

            sensor-bindings = <&inc_dec_kp LC(PAGE_UP) LC(PAGE_DOWN)>;
        };

        MOUSE {
            bindings = <
&trans  &trans  &trans  &trans  &trans                      &trans  &trans    &trans    &trans    &trans
&trans  &trans  &trans  &trans  &trans  &trans      &trans  &trans  &mkp MB1  &mkp MB2  &mkp MB3  &trans
&trans  &trans  &trans  &trans  &trans  &trans      &trans  &trans  &mkp MB1  &mkp MB2  &mkp MB3  &trans
&trans  &trans  &trans  &trans  &trans  &trans      &trans  &trans                                &trans
            >;
        };

        SCROLL {
            bindings = <
&trans  &trans  &trans  &trans  &trans                      &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans      &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans      &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans      &trans  &trans                          &trans
            >;
        };

        bluetooth {
            bindings = <
&trans      &trans        &trans        &trans        &trans                                    &bt BT_SEL 0  &bt BT_SEL 1  &bt BT_SEL 2  &bt BT_SEL 3  &bt BT_SEL 4
&kp ESCAPE  &bt BT_SEL 0  &bt BT_SEL 1  &bt BT_SEL 2  &bt BT_SEL 3  &bt BT_CLR          &trans  &trans        &trans        &trans        &trans        &trans
&trans      &trans        &trans        &trans        &trans        &bt BT_CLR_ALL      &trans  &trans        &trans        &trans        &trans        &bt BT_CLR
&trans      &trans        &trans        &trans        &trans        &trans              &trans  &trans                                                  &bt BT_CLR_ALL
            >;
        };
    };
};
